import java.util.*;
class Main {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int[][] arr=new int[n+1][n+1];
        int edges=sc.nextInt();
        for(int i=0; i<edges; i++){
            int s=sc.nextInt();
            int d=sc.nextInt();
            addedge(s, d, arr);
        }
        print(arr);
    }
    public static void addedge(int s, int d,int[][] arr){
        if((s>=0 && s<arr.length )&&(d>=0 && d<arr.length )){
            arr[s][d]=1;
            arr[d][s]=1;
        }
    }
    public static void print(int[][] arr){
        for(int i=0; i<arr.length; i++){
            for(int j=0; j<arr.length; j++){
                System.out.print(arr[i][j]+" ");
            }
            System.out.println();
        }
    }
}

import java.util.*;
class graph{
    private int v;
    private ArrayList<List<Integer>> adj;
    public graph(int v){
        this.v=v;
        adj=new ArrayList<>();
        for(int i=0; i<v; i++){
            adj.add(new ArrayList<>());
        }
    }
    public void addedge(int s, int d){
        adj.get(s).add(d);
        adj.get(d).add(s);
    }
    public void print(){
        for(int i=0; i<v; i++){
            System.out.print("vertex :"+i);
            for(int nei:adj.get(i)){
                System.out.print(" -> "+nei);
            }
            System.out.println();
        }
    }public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int v=sc.nextInt();
        graph g=new graph(v);
        for(int i=0; i<v; i++){
            int s=sc.nextInt();
            int d=sc.nextInt();
            g.addedge(s, d);
        }
        g.print();
    }
}

import java.util.*;
class graph{
    private int v;
    private ArrayList<List<Integer>> adj;
    public graph(int v){
        this.v=v;
        adj=new ArrayList<>();
        for(int i=0; i<v; i++){
            adj.add(new ArrayList<>());
        }
    }
    public void addedge(int s, int d){
        adj.get(s).add(d);
        adj.get(d).add(s);
    }
    public void print(int start){
        boolean[] visit=new boolean[v];
        Queue<Integer> q=new LinkedList<>();
        q.add(start);
        visit[start]=true;
        while(!q.isEmpty()){
            int current=q.poll();
            System.out.print(current+" ");
            for(int nei:adj.get(current)){
               if(!visit[nei]){
                   q.add(nei);
                   visit[nei]=true;
               }
                
            }
        }
       
    }public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int v=sc.nextInt();
        graph g=new graph(v);
        for(int i=0; i<v; i++){
            int s=sc.nextInt();
            int d=sc.nextInt();
            g.addedge(s, d);
        }
        g.print(0);
    }
}

import java.util.*;
class graph{
    private int v;
    private ArrayList<List<Integer>> adj;
    public graph(int v){
        this.v=v;
        adj=new ArrayList<>();
        for(int i=0; i<v; i++){
            adj.add(new ArrayList<>());
        }
    }
    public void addedge(int s, int d){
        adj.get(s).add(d);
        adj.get(d).add(s);
    }
    public void dfsrecursive(int start, boolean[] visit){
        visit[start]=true;
        System.out.print(start+" ");
        for(int ele:adj.get(start)){
            if(!visit[ele]){
                dfsrecursive(ele, visit);
            }
        }
    }
    public void dfs(int start){
        boolean[] visit=new boolean[v];
        dfsrecursive(start, visit);
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int v=sc.nextInt();
        graph g=new graph(v);
        for(int i=0; i<v; i++){
            int s=sc.nextInt();
            int d=sc.nextInt();
            g.addedge(s, d);
        }
        g.dfs(0);
        //System.out.println();
    }
}